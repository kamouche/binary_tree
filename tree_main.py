# -*- coding: utf-8 -*-
"""tree_main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18B6J2KTegT3fFzYY4j1yDCw0ZvYwhbCx
"""

class Node:
    """A class for creating a binary tree node and inserting elements.

       Attributes:
       -----------
       y : int, str
            The value that exists at this node of the tree.  eg. tree=Node(4) initializes a tree with 
            a stump integer value of 4.

       Methods: 
       --------   
       insert(self, y) : Inserts a new element into the tree. 
    """

    def __init__(self, y):
        self.y = y
        self.right = None
        self.left = None

############################################### INSERTION #############################################################################################""
    def insert(self, y):
        if self.y == y:
            return
        elif self.y < y:
            if self.right is None:
                self.right = Node(y)
            else:
                self.right.insert(y)
        else: # self.y > y
            if self.left is None:
                self.left = Node(y)
            else:
                self.left.insert(y)
################################################################"RECHERCHE########################################################################
    def search(x, y):
        if x.y == y:
            return True
        if y < x.y:
            if x.left:
                return x.left.search(y)
            else:
                return False
        if y > x.y:
            if x.right:
                return x.right.search(y)
            else:
                return False

################################################################"Suppression########################################################################
    
    def delete(self, y):
        if self == None:
            return self
        if y < self.y:
            if self.left:
                self.left = self.left.delete(y)
            return self
        if y > self.y:
            if self.right:
                self.right = self.right.delete(y)
            return self
        if self.right == None:
            return self.left
        if self.left == None:
            return self.right
        min_larger_node = self.right
        while min_larger_node.left:
            min_larger_node = min_larger_node.left
        self.y = min_larger_node.y
        self.right = self.right.delete(min_larger_node.y)
        return self


######################################################## Display l'arbre ##################################################################
    def display(self):
        lines, _, _, _ = self._display_aux()
        for line in lines:
            print(line)


    def _display_aux(self):
        """Returns list of strings, width, height, and horizontal coordinate of the root. this is 
            a utility function that gets used by the <display()> method for building pretty stdout 
            visualization of the binary tree. """

        # No child exists.
        if self.right is None and self.left is None:
            line = '%s' % self.y
            width = len(line)
            height = 1
            middle = width // 2
            return [line], width, height, middle

        # Only left child exists.
        if self.right is None:
            lines, n, p, x = self.left._display_aux()
            s = '%s' % self.y
            u = len(s)
            first_line = (x + 1) * ' ' + (n - x - 1) * '_' + s
            second_line = x * ' ' + '/' + (n - x - 1 + u) * ' '
            shifted_lines = [line + u * ' ' for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, n + u // 2

        # Only right child exists.
        if self.left is None:
            lines, n, p, x = self.right._display_aux()
            s = '%s' % self.y
            u = len(s)
            first_line = s + x * '_' + (n - x) * ' '
            second_line = (u + x) * ' ' + '\\' + (n - x - 1) * ' '
            shifted_lines = [u * ' ' + line for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, u // 2

        # Two children exist.
        left, n, p, x = self.left._display_aux()
        right, m, q, y = self.right._display_aux()
        s = '%s' % self.y
        u = len(s)
        first_line = (x + 1) * ' ' + (n - x - 1) * '_' + s + y * '_' + (m - y) * ' '
        second_line = x * ' ' + '/' + (n - x - 1 + u + y) * ' ' + '\\' + (m - y - 1) * ' '

        if p < q:
            left += [n * ' '] * (q - p)
        elif q < p:
            right += [m * ' '] * (p - q)
            
        zipped_lines = zip(left, right)
        lines = [first_line, second_line] + [a + u * ' ' + b for a, b in zipped_lines]
        return lines, n + m + u, max(p, q) + 2, n + u // 2

######################################################### In-order traversal = Left-->Root-->Right ###################################
def inorder_traversal(root):
    '''
    Return an array of tree elements using inorder traversal.  
    In-order traversal = Left-->Root-->Right
    '''
    res = []
    if root:
        res = inorder_traversal(root.left)
        res.append(root.y)
        res = res + inorder_traversal(root.right)
    return res
######################################################### Le Reequilibrage de l'arbre ##########################################################
def balance_tree(array):
    '''
    steps:
        - Take inorder traversal of existing tree and store in array.
        - Find value at mid point of this array.  
        - create new binary tree using this midpoint as root node.
    '''
    if not array:
        return None
    
    midpoint = len(array) // 2
    new_root = Node(array[midpoint])
    new_root.left = balance_tree(array[ : midpoint])
    new_root.right = balance_tree(array[midpoint + 1 :])

    return new_root 
############################################################ Le Min et le Max ##########################################################
def BT_min(x):
    while x != None and x.left != None:
        x = x.left
    return x.y

def BT_max(x):
    while x != None and x.right != None:
        x = x.right
    return x.y

###################################################### la Construction d'arbre depuis une liste ##############################################   
def const_tree(elements):
    print("Construction Tree Avec ces elements:",elements)
    root = Node(elements[0])
    for i in range(1,len(elements)):
        root.insert(elements[i])
    return root

def main():
  values = [18, 5, 2, 23, 9, 27, 21, 40]
  
  tree = const_tree(values)
  tree.display()
  tree.insert(32)
  tree.insert(33)
  tree.insert(35)
  tree.display()

  balanced_tree = balance_tree(inorder_traversal(tree))
  balanced_tree.display()

  print("le 27 est il un element de l'arbre",tree.search(27))
  
  print("le min = ",BT_min(tree))
  print("le max = ",BT_max(tree))

  tree.delete(23)
  tree.display()

main()